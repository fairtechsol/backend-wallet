syntax = "proto3";

package grpc.matchProvider;


// Request to add a match
message AddMatchRequest {
  string matchType = 1;
  string competitionId = 2;
  string competitionName = 3;
  string title = 4;
  string marketId = 5;
  string eventId = 6;
  string teamA = 7;
  string teamB = 8;
  string teamC = 9;
  string startAt = 10;
  string id = 11;
  string createdAt = 12;
  bool isTv = 13;
  bool isFancy = 14;
  bool isBookmaker = 15;
}

// Response after adding a match
message AddMatchResponse {}

// ----------------- RaceMatch -----------------

message AddRaceMatchRequest {
  string matchType = 1;
  string title = 2;
  string marketId = 3;
  string createBy = 4;
  string eventId = 5;
  string startAt = 6;
  string id = 7;
  string venue = 8;
  string raceType = 9;
  string countryCode = 10;
  string createdAt = 11;
}

message AddRaceMatchResponse {}

// ----------------- MatchLock -----------------

message MatchLockRequest {
  string userId = 1;
  string matchId = 2;
  string type = 3;
  bool block = 4;
  string roleName = 5;
  bool operationToAll = 6;
}

message MatchLockResponse {}

// ----------------- UserEventWiseExposure -----------------

message UserEventWiseExposureRequest {
  string userId = 1;
}

message UserEventWiseExposureResponse {
  string data = 1;
}

// ----------------- MarketAnalysis -----------------

message MarketAnalysisRequest {
  string matchId = 1;
  string userId = 2;
}

message MarketAnalysisResponse {
  string data = 1;
}

// ----------------- UserEventWiseExposure -----------------

message VirtualEventWiseExposureRequest {
  string userId = 1;
  string roleName = 2;
}

message VirtualEventWiseExposureResponse {
  string data = 1;
}

// Message for match competitions
message MatchCompetitionsRequest {
  string type = 1;
}

message MatchCompetitionsResponse {
  string data = 1;
}

// Message for match dates
message MatchDatesRequest {
  string competitionId = 1;
}

message MatchDatesResponse {
  string data = 1;
}

// Message for matches by date
message MatchesByDateRequest {
  string competitionId = 1;
  string date = 2;
}

message MatchesByDateResponse {
  string data = 1;
}


message MatchDetailRequest {
  string matchId = 1;
}

message MatchDetailResponse {
  string data = 1;
}


message CardDetailRequest {
  string type = 1;
}

message CardDetailResponse {
  string data = 1;
}

message MatchListRequest {
  string query = 1;
}

message MatchListResponse {
  string data = 1;
}

message RaceBettingRequest {
  string matchId = 1;
  string type = 2;
}

message RaceBettingResponse {
  string data = 1;
}

message RaceCountryCodeListRequest {
  string matchType = 1;
}

message RaceCountryCodeListResponse {
  string data = 1;
}

message TournamentBettingRequest {
  string matchId = 1;
  string type = 2;
  string id = 3;
  bool isRate = 4;
}

message TournamentBettingResponse {
  string data = 1;
}

// Request to update a match
message UpdateMatchRequest {
  string id = 1;
  string data = 2;
}

// Response after adding a match
message UpdateMatchResponse {}


// Service for managing matches
service MatchProvider {
  rpc AddMatch(AddMatchRequest) returns (AddMatchResponse);
  rpc UpdateMatch(UpdateMatchRequest) returns (UpdateMatchResponse);
  rpc AddRaceMatch(AddRaceMatchRequest) returns (AddRaceMatchResponse);
  rpc MatchLock(MatchLockRequest) returns (MatchLockResponse);
  rpc UserEventWiseExposure(UserEventWiseExposureRequest) returns (UserEventWiseExposureResponse);
  rpc MarketAnalysis(MarketAnalysisRequest) returns (MarketAnalysisResponse);
  rpc VirtualEventWiseExposure(VirtualEventWiseExposureRequest) returns (VirtualEventWiseExposureResponse);
  rpc GetMatchCompetitions(MatchCompetitionsRequest) returns (MatchCompetitionsResponse);
  rpc GetMatchDates(MatchDatesRequest) returns (MatchDatesResponse);
  rpc GetMatchesByDate(MatchesByDateRequest) returns (MatchesByDateResponse);
  rpc MatchDetail(MatchDetailRequest) returns (MatchDetailResponse);
  rpc RaceDetail(MatchDetailRequest) returns (MatchDetailResponse);
  rpc CardDetail(CardDetailRequest) returns (CardDetailResponse);
  rpc MatchList(MatchListRequest) returns (MatchListResponse);
  rpc RaceBetting(RaceBettingRequest) returns (RaceBettingResponse);
  rpc RaceList(MatchListRequest) returns (MatchListResponse);
  rpc RaceCountryCodeList(RaceCountryCodeListRequest) returns (RaceCountryCodeListResponse);
  rpc GetTournamentBetting(TournamentBettingRequest) returns (TournamentBettingResponse);
}
